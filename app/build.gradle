apply plugin: 'com.android.application'
apply plugin: "androidsvgdrawable"
apply plugin: 'com.google.gms.google-services'


repositories {
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.imaginabit.yonodesperdicion"
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 51
        versionName "1.28.3"
    }

    compileOptions {
        encoding "UTF-8"
    }

    buildTypes {
         release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "mapKey", "\"${mapkey}\""
            buildConfigField "String", "googleAppId", "\"${googleappid}\""
            buildConfigField "String", "gcmdefaultSenderId", "\"${gcmdefaultSenderId}\""
            buildConfigField "String", "googlekey", "\"${googlekey}\""
            resValue "string", "google_maps_key", "\"${google_maps_key}\""
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", "\"${google_maps_key2}\""

        }
        debug {
            proguardFiles 'proguard-rules.pro'
            buildConfigField "String", "mapKey", "\"${mapkey}\""
            buildConfigField "String", "googleAppId", "\"${googleappid}\""
            buildConfigField "String", "gcmdefaultSenderId", "\"${gcmdefaultSenderId}\""
            buildConfigField "String", "googlekey", "\"${googlekey}\""
            resValue "string", "google_mapKey", "\"${google_maps_key}\""
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", "\"${google_maps_key2}\""
        }
    }

    sourceSets {
        main.res.srcDirs = [main.res.srcDirs, "build/generated/res/main"]
        // assets specfic transcoding
        main.assets.srcDirs = [main.assets.srcDirs, "build/generated/assets/main"]
        // flavor specific transcoding
        flavor1.res.srcDirs = [flavor1.res.srcDirs, "build/generated/res/flavor1"]
    }
}

dependencies {
    compile('com.github.rubengees:introduction:1.1.3@aar') {
        transitive = true;
    }

    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    //compile 'com.mcxiaoke.volley:library-aar:1.0.1' //es mas antigua y no encuentro las diferencias con com.mcxiaoke.volley:library:1.0.19
    //compile 'com.github.bumptech.glide:glide:3.6.0'
    //compile 'de.hdodenhof:circleimageview:1.3.0'

    //
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.google.android.gms:play-services:8.3.0'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.1'
    compile 'com.mcxiaoke.volley:library:1.0.19'
    compile 'com.android.support:support-v4:23.3.x'
    compile 'org.hamcrest:hamcrest-all:1.3'
}

//
// Tasks
//

// create a task to convert SVG to PNG DRAWABLE
task svgToPng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg-png')
    // specify the android res folder
    to = file('src/main/res/drawable')
    // create qualified directories if missing
    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    // if none specified, all densities will be used
    targetedDensities = ['ldpi', 'hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // relative path of the file specifying nine patch specs
    ninePatchConfig = file('src/main/svg-png/9patch.json')
    // output format of the generated resources
    outputFormat = 'PNG'
    // output type is drawable (default)
    outputType = 'drawable'

    // this is an experimental feature
    // it allow composition of SVG two generate resources for multiple combinations
    svgMaskFiles = files('src/main/svg-png/mask')
    svgMaskResourceFiles = files('src/main/svg-png/mask/svg')
}

// create a task to convert SVG to PNG DRAWABLE
task svgToDrawablePng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg-png')
    // specify the android res folder
    to = file('build/generated/res/main')
    // create qualified directories if missing
    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    // if none specified, all densities will be used
    targetedDensities = ['ldpi', 'hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // relative path of the file specifying nine patch specs
    ninePatchConfig = file('src/main/svg-png/9patch.json')
    // output format of the generated resources
    outputFormat = 'PNG'
    // output type is drawable (default)
    outputType = 'drawable'

    // this is an experimental feature
    // it allow composition of SVG two generate resources for multiple combinations
    svgMaskFiles = files('src/main/svg-png/mask')
    svgMaskResourceFiles = files('src/main/svg-png/mask/svg')
}

// create a task to convert SVG to PNG MIPMAP
task svgToMipmapPng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg-mipmap')
    // specify the android res folder
    to = file('build/generated/res/main')
    // create qualified directories if missing
    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    targetedDensities = ['ldpi', 'hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // output format of the generated resources
    outputFormat = 'PNG'
    // output type is mipmap
    outputType = 'mipmap'
}

// multiple task can be used
task svgToDrawableJpg(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = files('src/main/svg-jpg')
    to = file('build/generated/res/main')
    createMissingDirectories = true
    overwriteMode = 'ifModified'
    targetedDensities = ['ldpi', 'mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    outputFormat = 'JPG'
}

// flavor specific
task svgToMipmapPngFlavor1(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg-mipmap-flavor1')
    // specify the android res folder
    to = file('build/generated/res/flavor1')
    // let generate PNG for the following densities only
    targetedDensities = ['ldpi', 'hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // output format of the generated resources
    outputFormat = 'PNG'
    // output type is mipmap
    outputType = 'mipmap'
}

// unscaled raw transcoding
task svgToAssets(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg-raw')
    // specify the android res folder
    to = file('build/generated/assets/main')
    // output format of the generated resources
    outputFormat = 'PNG'
    // output type is raw
    // resource qualifiers wil be ignored
    outputType = 'raw'
}

